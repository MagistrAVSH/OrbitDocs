{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Material for MkDocs","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"integration/admin-panel/","title":"Admin dashboard","text":"<p>Note: Access to the dashboard is provided by request and requires your Telegram nickname.</p>"},{"location":"integration/admin-panel/#how-to-get-access","title":"How to get access","text":""},{"location":"integration/admin-panel/#1-send-command-admin-to-the-telegram-bot-orbit_portal_bot","title":"1. Send command <code>/admin</code> to the Telegram bot  @orbit_portal_bot","text":""},{"location":"integration/admin-panel/#2-you-will-get-a-link-to-the-admin-dashboard-where-you-can-administrate-your-games","title":"2. You will get a link to the admin dashboard where you can administrate your games","text":""},{"location":"integration/admin-panel/#how-to-add-edit-or-remove-items","title":"How to add, edit, or remove items","text":""},{"location":"integration/admin-panel/#2-select-one-of-your-games-and-click-the-store-button-items","title":"2. Select one of your games and click the store button <code>Items</code>","text":""},{"location":"integration/admin-panel/#3-you-have-access-to-change-items-their-description-and-prices","title":"3. You have access to change items, their description, and prices","text":""},{"location":"integration/admin-panel/#change-game-configuration","title":"Change game configuration","text":""},{"location":"integration/admin-panel/#1-change-supported-devices-and-supported-screen-formats","title":"1. Change supported devices and supported screen formats","text":""},{"location":"integration/admin-panel/#2-game-name-description-colors","title":"2. Game name, description, colors, ...","text":""},{"location":"integration/admin-panel/#3-screenshots-image-avatars","title":"3. Screenshots, image, avatars, ...","text":""},{"location":"integration/iap/","title":"In-game purchases","text":""},{"location":"integration/iap/#how-to-add-edit-or-remove-items","title":"How to add, edit, or remove items","text":""},{"location":"integration/iap/#1-get-access-to-admin-dashboard","title":"1. Get access to admin dashboard","text":""},{"location":"integration/iap/#2-select-one-of-your-games-and-click-the-store-button-items","title":"2. Select one of your games and click the store button <code>Items</code>","text":""},{"location":"integration/iap/#3-you-have-access-to-change-items-their-description-and-prices","title":"3. You have access to change items, their description, and prices","text":""},{"location":"integration/iap/#how-to-use-shop-api","title":"How to use Shop API","text":"<p>After you create your items, you can integrate them into your game.   </p>"},{"location":"integration/iap/#1-first-of-all-you-need-to-get-all-your-items","title":"1. First of all, you need to get all your items:","text":"UnityJavaScriptDefold <pre><code>var items = await PortalSDK.GetShopItems();\n</code></pre> <pre><code>const response = await PortalSDK.getShopItems();\n</code></pre> <pre><code>portalsdk.get_shop_items(function(self, data)\nend)\n</code></pre> <p><code>ShopItem</code> has the same fields as in the admin, and the most important is the <code>id</code></p> UnityJavaScriptDefold <pre><code>public class ShopItem\n{\n    /// &lt;summary&gt;\n    /// The unique identifier of the shop item.\n    /// &lt;/summary&gt;\n    public int id;\n\n    /// &lt;summary&gt;\n    /// The name of the shop item.\n    /// &lt;/summary&gt;\n    public string name;\n\n    /// &lt;summary&gt;\n    /// The description of the shop item.\n    /// &lt;/summary&gt;\n    public string description;\n\n    /// &lt;summary&gt;\n    /// The price of the shop item.\n    /// &lt;/summary&gt;\n    public int price;\n\n    /// &lt;summary&gt;\n    /// The date and time when the shop item was created.\n    /// &lt;/summary&gt;\n    public DateTime created;\n\n    /// &lt;summary&gt;\n    /// The date and time when the shop item was last updated.\n    /// &lt;/summary&gt;\n    public DateTime updated;\n}\n</code></pre> <pre><code>interface ShopItem {\n    id: number;\n    name: string;\n    description: string;\n    price: number;\n    created: string;\n    updated: string;\n}\n</code></pre> <pre><code>local shopItem = {\n    id = 1,\n    name = \"Sample Item\",\n    description = \"This is a sample shop item.\",\n    price = 100,\n    created = \"2025-06-12T10:00:00Z\",\n    updated = \"2025-06-12T12:00:00Z\"\n}\n</code></pre>"},{"location":"integration/iap/#2-the-second-important-api-method-is-getpurchasedshopitems","title":"2. The second important API method is <code>getPurchasedShopItems</code>:","text":"UnityJavaScriptDefold <pre><code>var purchased = await PortalSDK.GetPurchasedShopItems();\n</code></pre> <pre><code>const purchased = await PortalSDK.getPurchasedShopItems();\n</code></pre> <pre><code>portalsdk.get_purchased_shop_items(function(self, result)\n    -- shopItems\nend)\n</code></pre> <p>It gives you all the purchased items by the current player.  Now you can display your shop screen and associate your items with <code>ShopItems</code> from the API and mark purchased it.</p> <p>If your item can be purchased infinitely, you can just not mark it. SDK API does not limit you in the number of purchased items per player. </p>"},{"location":"integration/iap/#3-make-a-code-to-buy-an-item-by-id","title":"3. Make a code to buy an item by <code>id</code>","text":"UnityJavaScriptDefold <pre><code>var result = await PortalSDK.OpenPurchaseConfirmModal(itemId);\nif (result is { IsSuccessful: true }) {\n    Debug.Log(\"Purchase successful!\")\n}\nelse {\n    Debug.Log(\"Purchase failed.\")\n}\n</code></pre> <pre><code>const shopItems = await PortalSDK.getShopItems();\n\nconst shopItem = shopItems.find(item =&gt; item.id === itemId)\n\nconst result = await PortalSDK.openPurchaseConfirmModal(shopItem);\n\nif(result.status === \"success\") {\n    console.log(\"Purchase successful!\")\n} else {\n    console.log(\"Purchase failed.\")\n}\n</code></pre> <pre><code>portalsdk.open_purchase_confirm_modal(itemId, function(self, result)\n    if result.status == \"success\" then\n        print(\"Purchase successful!\")\n    else\n        print(\"Purchase failed.\")\n    end\nend)\n</code></pre> <p>After player will see modal window:    If a user doesn't have enough balance, a top-up popup will be shown    If the player confirms a purchase, after all, you will get the response <code>IsSuccessful = true</code> or <code>status == \"success\"</code></p>"},{"location":"integration/persistent-game-state/","title":"Persistent Game State Management","text":"<p>To maintain a persistent game state for each player, you can use the SDK API to write and read key-value pairs. The storage supports up to 5 MB per player.</p> <p>The most convenient approach is to save and retrieve the game state serialized in JSON format.</p> <p>The SDK provides three methods for data access. All operations are asynchronous due to their cloud nature. Still, we provide sync methods as the main because it may be difficult to adapt existing games with async methods, especially in the Unity environment</p> UnityDefoldJavaScript <pre><code>// Write\nPortalSDK.SetValue(\"string key\", \"string value\");\n\n// Read\nstring content = PortalSDK.GetValue(\"string key\");\n\n// Remove\nPortalSDK.RemoveValue(\"string key\");\n\n// Async versions:\n// Read\nstring content = await PortalSDK.GetValueAsync(\"string key\");\n\n// Write\nawait PortalSDK.SetValueAsync(\"string key\", \"string value\");\n</code></pre> <pre><code>-- Write\nportalsdk.set_value_sync(\"string key\", \"string value\");\n\n-- Read\nlocal content = portalsdk.get_value_sync(\"string key\");\n\n-- Remove\nportalsdk.remove_value(\"string key\");\n</code></pre> <pre><code>// Write\nwindow.PortalSDK.setValue(\"string key\", \"string value\");\n\n// Read\nconst content = await window.PortalSDK.getValue(\"string key\");\n\n// Remove\nwindow.PortalSDK.removeValue(\"string key\");\n</code></pre>"},{"location":"integration/requirments/","title":"Requirements","text":""},{"location":"integration/requirments/#unity-games","title":"Unity Games","text":"<ol> <li>Mobile (touch) controls</li> <li>Build Size<ul> <li>Main build: Up to 50 MB maximum for the main WebGL build + larger assets hosted.</li> <li>Up to 500 MB full game size. </li> </ul> </li> <li>Networking<ul> <li>All network code must use WebSockets transport.</li> </ul> </li> <li>Unity Version<ul> <li>Unity 6+ is strongly recommended, due to improved WebGL features and optimizations.</li> </ul> </li> <li>Performance<ul> <li>Target stable frame rates (ideally 30-60 FPS) on mid-range mobile devices.</li> <li>Game load time must be as low as possible, but the maximum is 20 seconds.</li> </ul> </li> </ol>"},{"location":"integration/requirments/#javascript-and-defold-games","title":"JavaScript and Defold Games","text":"<ol> <li>Mobile (touch) controls</li> <li>Bundle Size</li> <li>Up to 10 MB for all initial JavaScript, CSS, and other essential assets.</li> <li>Up to 200 MB full game size</li> <li>Performance</li> <li>Aim for at least 30-60 FPS on mobile devices.</li> <li>Game load time must be as low as possible, but the maximum is 20 seconds.</li> </ol>"},{"location":"integration/safe-area-guide/","title":"Safe Area Guide","text":"<p>A Safe Area in mobile design refers to the portion of the screen where essential UI elements should be placed to ensure they  are not obscured by notches, rounded corners, or system navigation bars.  Telegram has mostly the same safe area that we can see in native mobile apps and simulators.  For example, Unity Editor has an embedded Simulator:</p> <p></p> <p></p> <p>UI in games needs to be updated according to these references.</p>"},{"location":"integration/startup-configuration/","title":"Startup configuration","text":"<p>If you think that updating the game's interface is not rational in terms of time costs, you can disable full-screen mode in <code>startupConfig</code>. You can also set the initial position of the overlay on the screen in it. <code>startupConfig</code> can be modified either through the <code>index.html</code> file</p> JavaScript <p><pre><code>window.startupConfig = {\n isFullscreen: false,\n overlayPosition: \"bottomRight\"\n // \"topLeft\" | \"topRight\" | \"bottomLeft\" |\"bottomRight\"\n}; \n</code></pre> </p>"},{"location":"introduction/","title":"Introduction","text":"<p>Portal is a platform designed to enable developers to bring WebGL games and JavaScript apps into the Telegram store platform,  functioning similarly to Steam on a desktop or Google Play/App Store.  It allows users to deploy their games as Web Mini Apps in Telegram, leveraging a seamless using experience within a widely accessible platform.  Portal provides a robust toolset for integrating key features such as in-game purchases, advertisements, and multiplayer functionality. </p>"},{"location":"introduction/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ol> <li> <p>How many simultaneous users can the platform handle? Millions Can ads be blocked in Telegram mini-apps? </p> <p>No, ad blockers for mini-apps doesn't exist. </p> </li> <li> <p>Can we use our own Telegram mini-app in Portal?</p> <p>No, Telegram mini-apps are provided by us.</p> </li> <li> <p>How can we upload game build files to the platform?</p> <p>Through GitHub. For more details, refer to the Upload Game section.</p> </li> <li> <p>Can we use our hosting for web builds?</p> <p>No, you can only use our hosting.</p> </li> <li> <p>Are there any specific resolution or aspect ratio requirements?</p> <p>No. Only general requirements for mobile games (portrait and/or landscape) and requirements</p> </li> <li> <p>Can we use external APIs for in-game functionalities like leaderboards or matchmaking? </p> <p>Yes.</p> </li> <li> <p>Are there any restrictions on background network requests? </p> <p>No.</p> </li> </ol>"},{"location":"setup/defold/","title":"Defold Engine","text":""},{"location":"setup/defold/#how-to-install","title":"How to install","text":""},{"location":"setup/defold/#1-copy-a-link-from-releases-on-github","title":"1. Copy a link from releases on GitHub","text":"<p>https://github.com/orbit-software/portalsdk-defold/releases</p> <p></p>"},{"location":"setup/defold/#2-install-into-dependencies-of-gameproject","title":"2. Install into dependencies of <code>game.project</code>:","text":"game.project <pre><code>[project]\ntitle = TestGame\nversion = 1.0\ndependencies#0 = https://github.com/orbit-software/portalsdk-defold/archive/refs/tags/v0.1.6.2.zip\n</code></pre>"},{"location":"setup/defold/#3-set-a-template-for-html5-export","title":"3. Set a template for HTML5 export","text":"game.project <pre><code>[html5]\nhtmlfile = /portalsdk/manifests/web_template/engine_template.html\ncssfile = /portalsdk/manifests/web_template/style.css\n</code></pre>"},{"location":"setup/defold/#api-description","title":"API Description","text":"<p>The API is documented in details: </p> <p>PortalSDK Defold Script API API Usage Example</p>"},{"location":"setup/js/","title":"JavaScript","text":""},{"location":"setup/js/#1-install-the-sdk-run-the-following-command-to-install-the-sdk-via-npm","title":"1. Install the SDK Run the following command to install the SDK via npm:","text":"Bash <pre><code>npm i @orbit-software/sdk\n</code></pre>"},{"location":"setup/js/#2-alternate-install-through-script-tag","title":"2. (Alternate) Install through \"script tag\"","text":"HTML <pre><code>&lt;script src=\"https://storage.googleapis.com/social-networth/scripts/sdk.umd.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"setup/js/#3-initialize-the-sdk","title":"3. Initialize the SDK","text":"<p>Call the initialization functions at the start of your application:</p> JavaScript <pre><code>await PortalSDK.initialize();  \nPortalSDK.initializeOverlay();\n</code></pre>"},{"location":"setup/js/#4-launch-an-advertisement-optional","title":"4. Launch an Advertisement (Optional):","text":"<p>If you need to launch an ad at the start, check if ads are enabled and then request one:  </p> JavaScript <pre><code>if (await PortalSDK.isAdEnabled()) {\n    try {\n        await PortalSDK.requestAd();\n    } catch (ex) {\n        console.error(ex);\n    }\n}\n</code></pre>"},{"location":"setup/js/#5-setup-game-time-tracking","title":"5. Setup game time tracking","text":"<p>You must add the code for tracking game time as shown here:</p> JavaScript <p><pre><code>let timer;\nconst trackTimeEveryS = 20 // 20 seconds\n\nfunction startGameTimeTrack() {\n   if (timer) clearInterval(timer)\n\n   window.PortalSDK.trackGameTimeTick()\n\n   timer = setInterval(() =&gt; {\n       window.PortalSDK.trackGameTimeTick()\n   }, trackTimeEveryS * 1000)\n}\n</code></pre> And call the code above at the moment of loading the game instance.  </p> JavaScript <pre><code>startGameTimeTrack()\n</code></pre>"},{"location":"setup/js/#6-call-game-ready-event","title":"6. Call game-ready event","text":"<p>Call this method when the game is ready and visible to the user.  </p> JavaScript <pre><code>window.PortalSDK.gameReady()\n</code></pre> <p>Notes: Ensure you handle exceptions gracefully, especially when requesting ads. Initialization should occur as early as possible in your application lifecycle to prevent delays.</p>"},{"location":"setup/unity/","title":"Unity Engine","text":""},{"location":"setup/unity/#prerequisites","title":"Prerequisites","text":"<p>To work with PortalSDK, you\u2019ll need the following:</p> <p>Unity Versions: Unity 2022 LTS, or Unity 6 LTS (Unity 6 is preferable due to updated WebGL support). Installed WebGL Platform: Ensure that the WebGL Platform module is installed in your Unity setup.</p>"},{"location":"setup/unity/#unity-webgl-limitations","title":"Unity WebGL Limitations","text":"<p>Unity\u2019s WebGL platform offers a powerful way to run games on the web, but there are some limitations to keep in mind:</p> <ul> <li>Performance Constraints: WebGL applications run within a browser and have different performance limits than desktop builds.</li> <li>Memory Management: WebGL has specific memory constraints and handles memory differently, which can affect large games.</li> <li>Networking: WebGL networking relies on the browser\u2019s capabilities and may not support all network configurations.</li> <li>Texture Compression: Only certain types of texture compression are supported, which can impact visual quality and loading times.</li> </ul> <p>For more detailed information, check the links below.</p>"},{"location":"setup/unity/#links-to-unity-documentation-on-webgl-performance-and-limitations","title":"Links to Unity Documentation on WebGL Performance and Limitations","text":"<p>For in-depth information about optimizing and working within Unity\u2019s WebGL platform, refer to these resources:</p> <ul> <li>WebGL Performance</li> <li>WebGL Texture Compression</li> <li>WebGL Embedded Resources</li> <li>WebGL Networking</li> <li>WebGL Memory Management</li> <li>WebGL Audio</li> </ul>"},{"location":"setup/unity/#how-to-set-up-unity-game-with-portalsdk","title":"How to set up Unity Game with PortalSDK","text":""},{"location":"setup/unity/#1-set-up-the-package-from-git","title":"1. Set up the package from Git","text":"<p>Unity documentation</p> <ol> <li>Open your Unity project.</li> <li>Access the Package Manager in Unity, and select Add package from git URL...</li> <li>Enter the repository URL https://github.com/orbit-software/com.orbit.portalsdk.git</li> </ol> <p></p>"},{"location":"setup/unity/#11-set-up-the-package-from-a-local-folder-alternative-way-1","title":"1.1. Set up the package from a local folder (alternative way 1)","text":"<p>Unity documentation</p> <ol> <li>Open repository https://github.com/orbit-software/com.orbit.portalsdk</li> <li>Download repository as zip and unarchive</li> </ol> <p> </p> <p>Move <code>com.orbit.portalsdk</code> directory into <code>Assets/</code> directory of your Unity Project</p> <p> </p>"},{"location":"setup/unity/#12-step-set-up-the-unity-package-directly-into-project-alternative-way-2","title":"1.2. Step: Set up the Unity Package directly into project (alternative way 2)","text":"<ol> <li>Open repository https://github.com/orbit-software/com.orbit.portalsdk </li> <li>Download repository as zip and unarchive</li> </ol> <p>Move <code>com.orbit.portalsdk</code> directory into <code>Assets/</code> directory of your Unity Project</p> <p> </p>"},{"location":"setup/unity/#2-step-download-the-webgl-template","title":"2. Step: Download the WebGL Template","text":"<ul> <li>Go to the repository unity-web-template and download the template files.  </li> <li>Extract the contents if they are compressed.</li> </ul>"},{"location":"setup/unity/#3-step-copy-the-webgl-template-into-your-project","title":"3. Step: Copy the WebGL Template into Your Project","text":"<ul> <li>In your Unity project directory, navigate to <code>Assets/WebGLTemplates/</code>.  </li> <li>If it doesn\u2019t already exist, create a folder named <code>PortalSDK</code>.  </li> <li>Copy the downloaded PortalSDK WebGL template directory into this location.</li> </ul>"},{"location":"setup/unity/#4-set-the-webgl-template-in-player-settings","title":"4. Set the WebGL Template in Player Settings","text":"<ul> <li>Go to Edit &gt; Project Settings &gt; Player in Unity.  </li> <li>Under the WebGL settings, find the WebGL Template selector.  </li> <li>Select PortalSDK from the selector to apply it as your template.</li> </ul>"},{"location":"setup/unity/#5-step-set-webgl-publishing-settings","title":"5. Step: Set WebGL Publishing settings","text":"<p>Important settings:</p> <ul> <li>Compression Format: <code>Brotli</code> </li> <li>Name Files As Hashes: <code>true</code> </li> <li>Target WebAssembly 2023: <code>false</code> </li> <li>Use WebAssembly.Table: <code>false</code> </li> <li>Enable BigInt: <code>false</code></li> </ul> <p> </p>"},{"location":"setup/unity/#6-step-build-and-run-for-testing","title":"6. Step: Build and Run for Testing","text":"<ul> <li>Go to File &gt; Build Settings in Unity.  </li> <li>Select WebGL as your platform and click Switch Platform.  </li> <li>Click Build and Run to test your setup.  </li> </ul>"},{"location":"upload-game/upload-game/","title":"Upload game","text":"<p>Note: Access to the upload games is provided by request and requires your GitHub email.</p> <p>To upload games, we use <code>GitHub</code> as the primary platform for managing and storing build files. Simply push your game's build files into the designated <code>/public/</code> directory. </p>"},{"location":"upload-game/upload-game/#how-to-upload-game-to-platform","title":"How to upload game to platform","text":""},{"location":"upload-game/upload-game/#1-you-will-have-access-to-the-github-repository-for-the-game","title":"1. You will have access to the GitHub repository for the game:","text":""},{"location":"upload-game/upload-game/#2-push-your-build-files-into-public-directory","title":"2. Push your build files into <code>/public/</code> directory","text":""},{"location":"upload-game/upload-game/#3-after-a-few-minutes-your-game-can-be-accessed-in-the-portal","title":"3. After a few minutes your game can be accessed in the Portal.","text":""}]}